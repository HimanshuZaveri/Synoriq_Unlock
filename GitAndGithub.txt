Playlist Link "https://youtube.com/playlist?list=PLhW3qG5bs-L8OlICbNX9u4MZ3rAt5c5GG"

* Video 1* == Introduction
{
    Topics - 1> What is GIT
             2> What is Github
             3> Relation
             4> Basic Workflow

    1> GIT => -- Version Control system
              -- Free and Open Source
              -- Collabration
              -- Track Changes
    Types=>      1. Cetralized VCS      =>  Common Repository and Continuously needed to be online
                 2. Distributed VCS  {Git}       => Has a copy at the local machine on which work is done and then later it is commit -> push to the server repository

    2> Github => -- Website to upload your repositories online
                 -- provides backup 
                 -- provides GUIto repositories
                 -- makes collabration easier

    3> Git is not related to github.....
        ||                         \\
        version control              Website
        system and can                 < can use github with any VCS>
        be used
        <Similarly we can use 
        git with any online repository 
        management system>


    4> Workflow of git
        =>  Remote Repo. => {Clone/Pull} -- Local Repo  --  => From local machine we can take or chekout any repository or branch and create a working copy of it
        =>  We can make any to this working copy and it can be done while we our offline 
        =>  Once changes are done we can execute add command and it will put these changes in staging area 
        =>  Until this stage the changes are not committed yet i.e changes not saved to local repository -- For the same we execute commit command
        =>  Push command will finally apply the changes to the remote repository....
}
    
* Video 2*<skipped ==> installation on mac>
* Video 3* == installation on windows
{
    Topics - 1> Install git on windows
             2> Adding project to git for tracking
             3> Git commands
             4> Pushing poject to remote repository

    1> Installation -> Version details -> if not go to official site for downloading git 
    2> Tracking project -> add project
                            |-> open cmd from folder > git init
    3> Commands => git config -- global user.email "github email id"
                   git config -- global user.name "github user name"
                   git init - to start tracking
                   git status - to know the current status of repository [wehther changes made are saved or not ; commit is required or not]
                   git add  - after making changes in file we first need to add ... and only then we commit
                   git commit -m "<Message>"
    4> Adding to remote repo=>        git remote add origin <online repository location>
                                      git push -u origin <branch name>
}
*Video 4 => For Mac*
* Video 5* == Branching and Merging
{
    Topics:-    1. What are branches
                2. How to create branch
                3. How to checkout branch
                4. How to merge branch to master
                5. How to delete branch (local and remote)
                
    1. 
    2. Create Branch => git branch branch_name
    3. Checkout =>  git checkout branch_name
                    To have changes in github we will push it >> git push -u origin branch_name
    4. Merge => Before merging we need to first checkout master branch and then
                -- git merge branch_name
                -- git push -u origin master
    5. Delete => git branch -d branch_name                           => Local Repository
                 git push origin --delete branch_name                => Online Repository
}

* Video 6 * == <Email Notifications> --> Repository > settings > Notifications

* Video 7 * == Git Tags
{
  WHY,When =>  Usually done to mark specific points in history of your repository<like release points>
               Either to create historic restore points
    
     Commands =>  -- Check out the branch where you want to create tag
                  -- create tag with some tag name      >> git tag tag_name     ||      >> git tag -a tag_name -m "msg"  
                  -- Show tags  >> git tag      >> git show tag_name        >> git tag -l "___.*" -> will show all tags with ___ start
                  -- Push tags to remote    >> git push origin tag_name     >> git push origin --tags || git push --tags    >>> to push all tags at once
                  -- Delete tags from local    >> git tag -d tag_name  ||  git tag --delete tag_name   
                  -- Delete tags from remote   >> git push origin {-d tag_name} || --delete tag_name  || :tag_name
                  -- to delete multiple tags at once:   >> git tag -d v1.0 v1.1 (local)  >> git push origin -d v1.0 v1.1 (remote)
                  -- Checking out TAGS  >> We cannot checkout tags in git; We can create a branch from a tag and checkout the branch >> git checkout -b "branch name" "tag name"
                                        example : git checkout -b ReleaseVer1 v1.0

                  -- Creating TAGS from past commits >> git tag "tag name" "reference of commit"
                                        example : git tag  v1.2 5fcdb03
                                        For reference use >> git log
}

*Video 8* == Git Merge Vs Git Rebase
{
    In git there are 2 ways to integrate changes from one branch to another 
    -> Git Merge - Is a non-destructive operation
                 - existing branches are not changed in any way
                 - Creates a new merge commit in the current branch
               
    -> Git Rebase - Moves the entire current branch to begin on the tip of the other branch
                  - Re-writes the project history
                  - We get much cleaner and linear history
              command >> git rebase branch_name             
}

*Video 9* == Why to use Git
{
    -- It allows to work users in a team
    -- and then easily and efficiently merge their work into a single project
    -- It is allows to go back at some previous stage
}

*Video 10* == Adding Eclipse project to github
{
        Topics ->>
    1. How to create github repository
    2. How to clone repository in eclipse
    3. How to add eclipse project to github repository
    4. How to commit, push and pull the changes

Step 1 : Create GitHub account and SignIn

Step 2 : Start a Project = Create a repository

Step 3 : Start Eclipse

Step 4 : Goto Perspective - Git Repositories and click on Add Git Repo

Step 5 : Create a project in Eclipse

Step 6 : Do a right click on Project - Team - Share - Add to git repo

Step 7 : Commit and Push the project to the repo

Step 8 : Commit and Push every change to the repo
}
