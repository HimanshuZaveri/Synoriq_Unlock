>> Components
>> states
        >> conat [prevValue, setValue] = useState(pervValue);
        >> setValue( newValue );
        
        >> If current states depends on the previous state, then we define a function inside
            the setvalue to update it.
            
        >> conat [prevArrayValue, setArrayValue] = useState(pervArrrayValue);
        >> setArrayValue((addVal) => {
            return [...prevArrayValue, addVal]
        });
        
        
>> Key >> Helps react with identifying unique item.

>> {filteredExpeses.length === 0 && <p> sdafgaga </p>}
>>>>>>>>> returns --->>> sdafgaga               >> i.e. 2nd condition result

--------------------------------------------------------------------------------------------

>>> CSS injection methods dynamically

>> Inline Method::
          <input style={{
          borderColor: isValid ? "black" : "red" , 
          backgroundColor: isValid ? "transparent" : "salmon"}}
          type="text" onChange={goalInputChangeHandler} />
          
>> TRaditional external CSS
        code injection
        > <div className={`form-control ${!isValid ? 'invalid' : ""}`}>

>> Styled Component -- 

>> CSS Modules
