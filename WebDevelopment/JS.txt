https://www.youtube.com/playlist?list=PLRAV69dS1uWSxUIk5o3vQY2-_VKsOpXLD

*Video 1* & *Video 2* == Introduction

*Video 3* == Javascript Engines
{
	>> V8
	>> Spider Monkey
	>> Deno
	>> Node Js
}

*Video 4* == Java ES versions

*Video 5* == Variable and Datatypes
{
	Variables >> var 
		  >> let
		  >> const
	Datatypes >> string
		  >> number
		  >> boolean
		  >>undefined
}

*Video 6* == User Signup
{
	>> const can't be reassigned
	>> console.log("Name : " + name) 
	>> console.log("Email : " , email)
	>> console.log(`
	Name : ${name}
	Email : ${email}
	`)
}

*Video 7* == Operators in JS
{
	> console.log(Math.round(ans))
}

*Video 8* == Types and operator precedence

*Video 9* == Conditionals in JS

*Video 10* == Logical Condition in JS

*Video 11* == Ternary operator
{
	condition ? <if true this statement> : <if false>;
}

*Video 12* == Switch Case Statement
{
	switch(key) {case value:
			statement;
			break;
		     default:
		     break;}
}
*Video 13* == Coercion and falsy values
{
	Falsy Values >> Undefined
		     >> null
		     >> 0
		     >> ''
		     >> NaN (Not a Number)
	     >> null is an assigned value. It means nothing. undefined means a variable has been declared but not defined yet. null is an object
	Coercion:  Coercion refers to the process of automatic or implicit conversion of values from one data type to another.
	>> in JS == just checks for the value like (2=="2") is true
	 >> for strict checking we use (===)
}

*Video 14* == Basics of Functions
{
	function fun_name(name) {
	   console.log("Hello there, himanshu");
	   console.log(`Hello there, ${name}`);
		}
	fun_name(); -> This is calling the function
	fun_name; -> This is used when referencing a function.
}

*Video 15* == Functions in variable
{
	 >> var fun_name = function(){}
	 >> var fun_name = () => {}
	 
	 >> They ae called similarly as traditional functions. 
}

*Video 16* == Understand the context in javascript
{
	>> Global context differs in node and that of browser
	>> name === window.name --> Window undefined in node but still defined by the different name
	
	>> Js once executes whole code, the function is registered and put into the global context; Hence even when a function is called first and declared afterwards does not produce error....
}

*Video 17* == Code hoisting in JS
{
	>> Global Context - collecting information about everything.
	>> Execution Context - In majority of cases window object is available, which is destroyed with the browser.
	>> Execution Context > Variable Object
			     > Scope Chain
			     > this
	> Function declarations are scanned and made available
	> Variable declarations are scanned and made undefined
	
	i.e if we try to access a var before it is assigned a value, it will show undefined as the js knows it is present in global context but just happens to not know the value
}

*Video 18* == Scope Chaining
{
	>> the very inner local scope can ask for its above and global ones,
	>> but the upper layers or larger scope cant ask to the smaller ones.
}

*Video 19* == Intro to THIS
{
	>> this keyword gives access to global context.......
	> in node it is empty object
	> while in browser it is window
}

*Video 20* == Introduction to Array
{
	>> var countries =["India","USA"]
	>> var states = new Array("","","")
	>> delete from end; arr.pop()
	>> delete from front; 
		> arr.unshift("saf");
		> arr.shift();
	>> .indexOf()
	>> length
	>> Array.from("") >> similar to split
}

*Video 21* == Callback and Arrow Function
{
	Arrow function >> var fun = () => {};
	Callback function >> a callback is a function passed into another function as an argument to be executed later
	
	>> var isEven = (a) => {return a%2===0}
	>> [2,4,6,7].every(isEven);
	
	>> [2,4,6,7].every((e) => {return e%2===0});
	
	>> [2,4,6,7].every((e) => (e%2===0));
}

*Video 22* == Fill and Filter in Array
{
	Fill :-
	>> var testArr = [2,3,45,6,43,23]
	>> console.log(testArr.fill("h", 2, 5))
	>> [2,3,'h','h','h',23]
	
	Filter :-
	>> const num = [1,2,3,4,5,6,7,7,8,9]
	>> const result = num.filter((num) => num!=7)
	>> result -> [1,2,3,4,5,6,8,9]
}

*Video 23* == Slice and Splice
{
	slice -> it removes the elements within the range of the 2 parameters, while incase of single parameter, it slices off the array before that parameter
	>> var num = [1,2,3,4,5,6,7,7,8,9]
	>> num.slice(1,3) -> [1,4,5,6,7,7,8,9]
	>> num.slice(3) -> [4,5,6,7,7,8,9]
	
	splice-> starts replacing the elements from the index at first parameter , and goes upto the second para no. of times, and are replaced by the rest of the parametes
	>> var num = [1,2,3,4,5,6,7,7,8,9]
	>> num.splice(1, 3, 0)
	>> console.log(num) -> [1, 0, 5,6,7,7,8,9]
	
}

*Video 24* == Objects in JS
{
	>> var name = { firstname: "asdf", 
	last: "asdfsd", role: "sdf"}
	>> console.log(name.firstname)
	>> console.log(name["role"])
}

*Video 25* == Methods and objects
{
	>> var user = {
	firstName : "aslfk",
	courseList: [],
	buyCourse: function(courseName){
	this.courseList.push(courseName);}
	};
}

*Video 26* == For Loop Basics
{
	>> for(let i=0; i<10 ; i++){}
}

*Video 27* == While and do While
{
	let i =0;
	while (i < states.length){
	--------------
	}
	
	>> do{
		console.log(i);
		i++;
	  }  while(i<20);
}

*Video 28* == Above tutorial uploaded twice

*Video 29* == For each loop in JS
{
	>> For Each loop
		arr.forEach((s) => (console.log(s)));
}

*Video 30* == For-of and For-in Loop
{
	>> const names = ["","",""]
	>> For-of -- For arrays
		> for(const n of names){
		  console.log(n); }
	>> const symbols ={yt: "" , ig : ""}
	>> For-in -- for objects
		> for(const n in symbols){
		console.log(symbols[n])}
}
