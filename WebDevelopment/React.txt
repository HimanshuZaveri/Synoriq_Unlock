>> Components
>> states
        >> conat [prevValue, setValue] = useState(pervValue);
        >> setValue( newValue );
        
        >> If current states depends on the previous state, then we define a function inside
            the setvalue to update it.
            
        >> conat [prevArrayValue, setArrayValue] = useState(pervArrrayValue);
        >> setArrayValue((addVal) => {
            return [...prevArrayValue, addVal]
        });
        
        
>> Key >> Helps react with identifying unique item.

>> {filteredExpeses.length === 0 && <p> sdafgaga </p>}
>>>>>>>>> returns --->>> sdafgaga               >> i.e. 2nd condition result

--------------------------------------------------------------------------------------------

>>> CSS injection methods dynamically
Link:- https://github.com/academind/react-complete-guide-code/blob/06-styling/code/08-finished/src/components/CourseGoals/CourseInput/CourseInput.js
>> Inline Method::
          <input style={{
          borderColor: isValid ? "black" : "red" , 
          backgroundColor: isValid ? "transparent" : "salmon"}}
          type="text" onChange={goalInputChangeHandler} />
          
>> TRaditional external CSS
        code injection
        > <div className={`form-control ${!isValid ? 'invalid' : ""}`}>

>> Styled Component -- 

>> CSS Modules


--------------------------------------------------------------------------------------------
> To prevent <div> soup--
        >> Using Wrapper component to fulfill the requirement of the JSX/React
        >> const Wrapper = props => returm props.children;
        >> export default Wrapper
        
        >> <React.Fragment>   ....   </ React.Fragment>
        >> <> </>
        >> if -> import React, {Fragment} from 'react';
                Then can also use  <Fragment>  </Fragment>
                
                

> Portals --
        >> Its useful in DOM manipulation, i.e to decide the rendering of components in the index.html page
        
> Ref's --
        >> It can be used for reading variables in the component
        >> {useRef}
        
>>>                        >> Portals <createPortals()> (Lets us able to render the components where we intend to in the index.html)
                       >> Ref's <useRef> (Helps to read variables' data without using useState)        
        
-----------------------------------------------------------------------------------------------------

> Effect -- 
        >> Evaluate & Render JSX
        >> Manage State & Props
        >> Reat to (User) Events & Input
        >> Re-evaluate Componentupon State & Prop Changes
        
        >> useEffect( () => {} , [dependencies])
        
        
        >> useEffect ( () => {
                function which is needed to be prevented from side effects / from rendering every time our component is rendered.
                        const a = setTimeout(()=>{},500)
                return () => {          // CleanUp Function, runs just before the next instance,  and doesn't runs for the first instance
                        clearTimeout(a);
                }        
        } , [dependencies] );
        >> Incase of empty dependencies i.e. [] ;   useEffect function only runs for the first time and the return part 
                                                    i.e. cleanup code runs only when the component is finally deleted.
                                                                                                        
-----------------------------------------------------------------------------------------------------

> Reducers and useReducer:- 
        >> const [state, dispatchFn] = useReducer(reducerFn, initialState, initFn);
        
        >> state-- The state snapshot used in the component re-render/ re evaluation cycle
        >> dispatchFn-- A function that can be used to dispatch a new action (i.e. trigger an update of the state)
        >> reducerFn-- (prevState, action) => newState
                - A function that is triggered automatically once an action is launched(via dispatchFn())
        >> initialState-- The initial state
        >> initFn-- A function to set the initial state programmatically

-----------------------------------------------------------------------------------------------------

> React.Memo();
> useCallback();
> useMemo();

-----------------------------------------------------------------------------------------------------

>> HTTP-Request:- 
        > fetch();
        > convert to .json if needed
        > pass method POST if want to insert the data
        > 

-----------------------------------------------------------------------------------------------------

Difference between the statement executed under the component function and outside the component function

