https://www.youtube.com/watch?v=N1KNw1tr47k&list=PLMJfvBwcOl66_1UJV8ywUoL7mZFPIMJKx&index=1&t=78s

*Video 1* == Basic Workflow
{
      >> Local copy -> add >> Staging -> commit >> Local Repository -> push >> Remote Repo.
}

*Video 2* == Clone Git Repository
{
      >> right click >> git clone >> give the https path
}

*Video 3* == Git add(staging), commit and push
{
      >> Instead of going throuh each step by git cli we can simply use push in tortoisegit
}

*Video 4* == Git fetch, merge and pull
{
      >> Local branch - master on local system
      >> Remote Tracking Branch - origin/master(on local sys)
      >> Remote Branch - master (on GitHub or Remote Server)
     
 ------------------------------------------------------------------
      >> Git Fetch -> Updates remote tracking branch
         Ex: updates(origin/master) from (origin master)
      >> Git Merge -> Merge remote-tracking branch into local branch
         Ex: merge(origin/master) into (master)
        
      >> Above 2 can be replaced by Git Pull command
        
}

*Video 5* == Creating Git Branches
{
       -> create new brach on github >> now fetch from the repository at local disk [right click-> TortoiseGit -> fetch] >> This will add the branch to the local repo also
       -> you can switch between branches by checkout option...
}

*Video 6* == Fast Forward Merge and 3-Way Merge
{
       >> Fast Forward Merge -> This merge happens when a branch is made out of the master and after that no change takes place in master branch. 
                             -> Although we had changes in the branch formed above.
                             -> Now when we will Merge the branches the merge will be fast forward and no explicit commit takes place.
       >> 3-Way Merge -> This merge occurs when the thier have been some changes or commits in both the branches after the branch formation;
                      -> The merge then taken place is known as 3-Way Merge.
}

*Video 7* == Create, Switch and Delete Branch using TorGit
{
      >> Creating and deleting using TortoiseGit; and switching among the branches.
}

*Video 8* == Stashing
{
      >> Helps while we need to switch branches before commiting and restricting undo of the important changes...
}

*Video 9* == Undoing local changes using tortoiseGit revert option
{     >> The tortoise git revert is === >> git checkout -- <path-to-file>}

*Video 10* == Undoing local changes using tortoiseGit <<reset>> option
{     >> git reset --hard
      >>> Resets the tracked file to the commited state <is done through log>
}

*Video 11* ==  git clean using tortoiseGit
{
      >> git reset hard + git clean command to remove files
}

*Video 12* == git revert using tortoise git
{
      >> It does not hampers the previous commits instead adds one more commit to the log,
            of previous commit.
}

*Video 13* == Create and apply patch
{
      >> It is the diff between 2 files.
      >> used to share changes
}

*Video 14* == DiffMerge
{

}

*Video 15* == .gitignore
{
      >> To make git ignore the untracked files.
}

*Video 16* == .gitkeep
{
      >> This is used to consider the folders or files that are empty and untracked
}

*Video 17* == Cherry Pick
{
      >> It is used to commit a branch same as that of the commit to other branch.
}

*Video 18* == remove already tracked file and add it to .gitignore file
{
      >> TortoiseGitDelete    - git rm <filename>
                              - git rm -r <dir>
      >> TortoiseGitDelete (Keep Local)   - git rm --cached <filename>
                                          - git rm -r --cached <dir>
}

*Video 19* == Create, show and delete git tags using tortoiseGit
{
      >>> tags are to label a release or a stable version of the project.
}

*Video 20* == Rebase
{
      >> NOTE:- If feature branch is not yet shared to remote repository,
                  then only we shoul change the base of feature branch
                  using git rebase command otherwise, things will get messy when sb
                  try to pull your changes work back into theirs
      >> After this if we merge, then it will be fast forward merge.
}

*Video 21* == Gitflow Workflow
{
      >>> Gitflow workflow is the concept of having branches to develop 
            and collabrate with releaes
      >>> It can also be implemented using a plugin which will maintain everythng for us
}

*Video 22* == Clone git repository with ssh using tortoisegit
{
      >>> Using PUTTYgen key , generate public and private key 
      >>> then link it to the github account
      >>> And proceed with cloning using ssh link
}

*Video 23* == Undo merge or revert merge commit
{
      >>> this will help u to get to the state just before the merge; 
            and while selecting any parent willl mean that u want to 
            keep the commits of that parent and want to remove of others
}

*Video 24* == Modify or Amend Last Commit
{
      >>> Message Only - >> git commit --amend -m "updated message"
      >> File addition ->> git reset . 
                        >> git add file.txt
                        >> git commit --amend --no-edit
}
