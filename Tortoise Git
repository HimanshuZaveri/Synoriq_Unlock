https://www.youtube.com/watch?v=N1KNw1tr47k&list=PLMJfvBwcOl66_1UJV8ywUoL7mZFPIMJKx&index=1&t=78s

*Video 1* == Basic Workflow
{
      >> Local copy -> add >> Staging -> commit >> Local Repository -> push >> Remote Repo.
}

*Video 2* == Clone Git Repository
{
      >> right click >> git clone >> give the https path
}

*Video 3* == Git add(staging), commit and push
{
      >> Instead of going throuh each step by git cli we can simply use push in tortoisegit
}

*Video 4* == Git fetch, merge and pull
{
      >> Local branch - master on local system
      >> Remote Tracking Branch - origin/master(on local sys)
      >> Remote Branch - master (on GitHub or Remote Server)
     
 ------------------------------------------------------------------
      >> Git Fetch -> Updates remote tracking branch
         Ex: updates(origin/master) from (origin master)
      >> Git Merge -> Merge remote-tracking branch into local branch
         Ex: merge(origin/master) into (master)
        
      >> Above 2 can be replaced by Git Pull command
        
}

*Video 5* == Creating Git Branches
{
       -> create new brach on github >> now fetch from the repository at local disk [right click-> TortoiseGit -> fetch] >> This will add the branch to the local repo also
       -> you can switch between branches by checkout option...
}

*Video 6* == Fast Forward Merge and 3-Way Merge
{
       >> Fast Forward Merge -> This merge happens when a branch is made out of the master and after that no change takes place in master branch. 
                             -> Although we had changes in the branch formed above.
                             -> Now when we will Merge the branches the merge will be fast forward and no explicit commit takes place.
       >> 3-Way Merge -> This merge occurs when the thier have been some changes or commits in both the branches after the branch formation;
                      -> The merge then taken place is known as 3-Way Merge.
}

*Video 7* == Create, Switch and Delete Branch using TorGit
{
      >> Creating and deleting using TortoiseGit; and switching among the branches.
}

*Video 8* == Stashing
{
      >> Helps while we need to switch branches before commiting and restricting undo of the important changes...
}

*Video 9* == Undoing local changes using tortoiseGit revert option
{     >> The tortoise git revert is === >> git checkout -- <path-to-file>}

*Video 10* == Undoing local changes using tortoiseGit <<reset>> option
{     >> git reset --hard
      >>> Resets the tracked file to the commited state <is done through log>
}

*Video 11* ==  git clean using tortoiseGit
{
      >> git reset hard + git clean command to remove files
}

*Video 12* == git revert using tortoise git
{
      >> It does not hampers the previous commits instead adds one more commit to the log,
            of previous commit.
}

*Video 13* == 
